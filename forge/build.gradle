plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {}

dependencies {
    //Forge
    forge("net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}")

    //Create
    modImplementation("com.simibubi.create:create-${rootProject.minecraft_version}:${rootProject.create_version}:slim") { transitive = false }

    //Registrate
    modImplementation("com.tterrag.registrate:Registrate:${rootProject.registrate_version}")

    //Flywheel
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${rootProject.minecraft_version}:${rootProject.flywheel_version}")

    //Curios
    include modImplementation("earth.terrarium.baubly:baubly-forge-${rootProject.minecraft_version}:${rootProject.baubly_version}") transitive false
    modImplementation("top.theillusivec4.curios:curios-forge:${rootProject.curios_version}+${rootProject.minecraft_version}")

    //Mixin Extras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${rootProject.mixin_extras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${rootProject.mixin_extras_version}"))

    // Jei
    compileOnlyApi("mezz.jei:jei-${rootProject.minecraft_version}-forge-api:${rootProject.jei_version}")

    //Item Viewers
    switch (project.item_viewer.toLowerCase()) {
        case "jei": modLocalRuntime("curse.maven:jei-238222:${rootProject.jei_file_id_forge}"); break
        case "disabled": break
        default: println("Invalid item viewer: ${item_viewer} must be JEI or disabled"); break
    }

    // Resourceful Lib (This is needed because it does not unpackage correctly on forge)
    forgeRuntimeLibrary("com.teamresourceful:yabn:1.0.3")
    forgeRuntimeLibrary("com.teamresourceful:bytecodecs:1.0.2")

    // forge sucks so much
    forgeRuntimeLibrary("com.teamresourceful:resourceful-cosmetics-4j:${rootProject.resourceful_cosmetics_version}")

    //DevAuth
    if (rootProject.devauth_enabled == "true") {
        modRuntimeOnly("me.djtheredstoner:DevAuth-forge-latest:${rootProject.devauth_version}")
    }
    // Ad Astra Testing
    if (rootProject.ad_astra_testing == "true") {
        modRuntimeOnly("maven.modrinth:ad-astra:${rootProject.ad_astra_version_forge}")
        modRuntimeOnly("maven.modrinth:resourceful-config:${rootProject.resourceful_config_version_forge}")
    }
    
    //Forge stuff
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    Project common = project(":common")

    inputs.property "version", project.version
    inputs.property "contributors", rootProject.contributors
    inputs.property "minecraft_version", rootProject.minecraft_version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "contributors": rootProject.contributors,
                "minecraft_version": rootProject.minecraft_version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

// The Production jar
remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("forge")
}

tasks.register("buildBothForge") {
    remapJar.destinationDirectory = project.rootProject.file("build/libs")
    dependsOn remapJar
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

loom {
    Project common = project(":common")
    accessWidenerPath = common.file("src/main/resources/estrogen.accesswidener")

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig("estrogen-common.mixins.json")
        mixinConfig("estrogen.mixins.json")
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
            exclude ".cache/**"
        }
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {}
}