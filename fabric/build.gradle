plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {}

dependencies {
    // Fabric
    modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")

    // Fapi
    modApi("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}+${rootProject.minecraft_version}")

    //Create
    modImplementation("com.simibubi.create:create-fabric-${rootProject.minecraft_version}:${rootProject.create_fabric_version}+mc${rootProject.minecraft_version}")

    //Trinkets
    include modImplementation("earth.terrarium.baubly:baubly-fabric-${rootProject.minecraft_version}:${rootProject.baubly_version}") transitive false
    modImplementation("dev.emi:trinkets:${rootProject.trinkets_version}")
    project.cardinal_modules.replaceAll(" ", "").split(",").each { module ->
        modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-${module}:${rootProject.cardinal_version}")
    }

    // REI
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api:${rootProject.rei_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin:${rootProject.rei_version}")

    // EMI
    modCompileOnly("dev.emi:emi-fabric:${rootProject.emi_version}+${rootProject.minecraft_version}:api")

    // JEI
    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-fabric-api:${rootProject.jei_version}")

    //Mod Menu
    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}")

    //Mixin Extras
    implementation(include(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${rootProject.mixin_extras_version}")))

    // Item Viewers
    switch (project.item_viewer.toLowerCase()) {
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}") exclude(group: "net.fabricmc"); break
        case "emi": modLocalRuntime("dev.emi:emi-fabric:${rootProject.emi_version}+${rootProject.minecraft_version}"); break
        case "jei": modLocalRuntime("curse.maven:jei-238222:${rootProject.jei_file_id_fabric}"); break
        case "disabled": break
        default: println("Invalid item viewer: ${item_viewer} must be REI, EMI or disabled"); break
    }

    //DevAuth
    if (rootProject.devauth_enabled == "true") {
        modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${rootProject.devauth_version}")
    }

    // Ad Astra Testing
    if (rootProject.ad_astra_testing == "true") {
        modRuntimeOnly("maven.modrinth:ad-astra:${rootProject.ad_astra_version_fabric}")
        modRuntimeOnly("maven.modrinth:resourceful-config:${rootProject.resourceful_config_version_fabric}")
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    Project common = project(":common")

    inputs.property "version", project.version
    inputs.property "contributors", rootProject.contributors
    inputs.property "minecraft_version", rootProject.minecraft_version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "contributors": rootProject.contributors,
                "minecraft_version": rootProject.minecraft_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

// The Production jar
remapJar {
    inputFile.set shadowJar.archiveFile
    injectAccessWidener = true
    dependsOn shadowJar
    archiveClassifier.set("fabric")
}

tasks.register("buildBothFabric") {
    remapJar.destinationDirectory = project.rootProject.file("build/libs")
    dependsOn remapJar
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {}
}

loom {
    Project common = project(":common")
    Project forge = project(":forge")
    // Datagen, while this is in fabric only, it generates files for forge too
    runs {
        datagen {
            client()
            name "Data Generation (client)"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/main/generated")}"
            vmArg "-Destrogen.datagen.fabric-output-dir=${file("src/main/generated")}"
            vmArg "-Destrogen.datagen.forge-output-dir=${forge.file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=estrogen"
            vmArg "-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}"

            runDir "build/datagen"
        }
    }
    runs {
        mixinDebug {
            inherit client
            name "Mixin Debug"
            vmArg "-Dmixin.debug.export=true"
        }
    }

    accessWidenerPath = common.file("src/main/resources/estrogen.accesswidener")
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
            exclude ".cache/**"
        }
    }
}